#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// ev3dev.actuators.ev3.EV3Led
	c0 [label=<<table title="ev3dev.actuators.ev3.EV3Led" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3Led </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LEFT : int </td></tr>
<tr><td align="left" balign="left"> - direction : int </td></tr>
<tr><td align="left" balign="left"> + RIGHT : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3Led(button : int) </td></tr>
<tr><td align="left" balign="left"> + setPattern(pattern : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.ev3.Sound
	c1 [label=<<table title="ev3dev.actuators.ev3.Sound" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sound </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - SOUND_PATH : String </td></tr>
<tr><td align="left" balign="left"> - CMD_BEEP : String </td></tr>
<tr><td align="left" balign="left"> - CMD_APLAY : String </td></tr>
<tr><td align="left" balign="left"> - VOLUME : String </td></tr>
<tr><td align="left" balign="left"> - VOLUME_PATH : String </td></tr>
<tr><td align="left" balign="left"> - DISABLED_FEATURE_MESSAGE : String </td></tr>
<tr><td align="left" balign="left"> - Instance : Sound </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - Sound() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : Sound </td></tr>
<tr><td align="left" balign="left"> + beep() </td></tr>
<tr><td align="left" balign="left"> + twoBeeps() </td></tr>
<tr><td align="left" balign="left"> + playTone(frequency : int, duration : int, volume : int) </td></tr>
<tr><td align="left" balign="left"> + playTone(frequency : int, duration : int) </td></tr>
<tr><td align="left" balign="left"> + playSample(file : File, volume : int) </td></tr>
<tr><td align="left" balign="left"> + playSample(file : File) </td></tr>
<tr><td align="left" balign="left"> + setVolume(volume : int) </td></tr>
<tr><td align="left" balign="left"> + getVolume() : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.ev3.lcd.EV3GraphicsLCD
	c2 [label=<<table title="ev3dev.actuators.ev3.lcd.EV3GraphicsLCD" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3GraphicsLCD </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + FB_PATH : String </td></tr>
<tr><td align="left" balign="left"> + SCREEN_WIDTH : int </td></tr>
<tr><td align="left" balign="left"> + SCREEN_HEIGHT : int </td></tr>
<tr><td align="left" balign="left"> + LINE_LEN : int </td></tr>
<tr><td align="left" balign="left"> + ROWS : int </td></tr>
<tr><td align="left" balign="left"> + BUF_SIZE : int </td></tr>
<tr><td align="left" balign="left"> - image : BufferedImage </td></tr>
<tr><td align="left" balign="left"> - g2d : Graphics2D </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3GraphicsLCD() </td></tr>
<tr><td align="left" balign="left"> + getImage() : BufferedImage </td></tr>
<tr><td align="left" balign="left"> + flush() </td></tr>
<tr><td align="left" balign="left"> + draw(s : Shape) </td></tr>
<tr><td align="left" balign="left"> + drawImage(img : Image, xform : AffineTransform, obs : ImageObserver) : boolean </td></tr>
<tr><td align="left" balign="left"> + drawImage(img : BufferedImage, op : BufferedImageOp, x : int, y : int) </td></tr>
<tr><td align="left" balign="left"> + drawRenderedImage(img : RenderedImage, xform : AffineTransform) </td></tr>
<tr><td align="left" balign="left"> + drawRenderableImage(img : RenderableImage, xform : AffineTransform) </td></tr>
<tr><td align="left" balign="left"> + drawString(str : String, x : int, y : int) </td></tr>
<tr><td align="left" balign="left"> + drawString(str : String, x : float, y : float) </td></tr>
<tr><td align="left" balign="left"> + drawString(iterator : AttributedCharacterIterator, x : int, y : int) </td></tr>
<tr><td align="left" balign="left"> + drawString(iterator : AttributedCharacterIterator, x : float, y : float) </td></tr>
<tr><td align="left" balign="left"> + drawGlyphVector(g : GlyphVector, x : float, y : float) </td></tr>
<tr><td align="left" balign="left"> + fill(s : Shape) </td></tr>
<tr><td align="left" balign="left"> + hit(rect : Rectangle, s : Shape, onStroke : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + getDeviceConfiguration() : GraphicsConfiguration </td></tr>
<tr><td align="left" balign="left"> + setComposite(comp : Composite) </td></tr>
<tr><td align="left" balign="left"> + setPaint(paint : Paint) </td></tr>
<tr><td align="left" balign="left"> + setStroke(s : Stroke) </td></tr>
<tr><td align="left" balign="left"> + setRenderingHint(hintKey : RenderingHints.Key, hintValue : Object) </td></tr>
<tr><td align="left" balign="left"> + getRenderingHint(hintKey : RenderingHints.Key) : Object </td></tr>
<tr><td align="left" balign="left"> + setRenderingHints(hints : Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> + addRenderingHints(hints : Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> + getRenderingHints() : RenderingHints </td></tr>
<tr><td align="left" balign="left"> + translate(x : int, y : int) </td></tr>
<tr><td align="left" balign="left"> + translate(tx : double, ty : double) </td></tr>
<tr><td align="left" balign="left"> + rotate(theta : double) </td></tr>
<tr><td align="left" balign="left"> + rotate(theta : double, x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + scale(sx : double, sy : double) </td></tr>
<tr><td align="left" balign="left"> + shear(shx : double, shy : double) </td></tr>
<tr><td align="left" balign="left"> + transform(Tx : AffineTransform) </td></tr>
<tr><td align="left" balign="left"> + setTransform(Tx : AffineTransform) </td></tr>
<tr><td align="left" balign="left"> + getTransform() : AffineTransform </td></tr>
<tr><td align="left" balign="left"> + getPaint() : Paint </td></tr>
<tr><td align="left" balign="left"> + getComposite() : Composite </td></tr>
<tr><td align="left" balign="left"> + setBackground(color : Color) </td></tr>
<tr><td align="left" balign="left"> + getBackground() : Color </td></tr>
<tr><td align="left" balign="left"> + getStroke() : Stroke </td></tr>
<tr><td align="left" balign="left"> + clip(s : Shape) </td></tr>
<tr><td align="left" balign="left"> + getFontRenderContext() : FontRenderContext </td></tr>
<tr><td align="left" balign="left"> + create() : Graphics </td></tr>
<tr><td align="left" balign="left"> + getColor() : Color </td></tr>
<tr><td align="left" balign="left"> + setColor(c : Color) </td></tr>
<tr><td align="left" balign="left"> + setPaintMode() </td></tr>
<tr><td align="left" balign="left"> + setXORMode(c1 : Color) </td></tr>
<tr><td align="left" balign="left"> + getFont() : Font </td></tr>
<tr><td align="left" balign="left"> + setFont(font : Font) </td></tr>
<tr><td align="left" balign="left"> + getFontMetrics(f : Font) : FontMetrics </td></tr>
<tr><td align="left" balign="left"> + getClipBounds() : Rectangle </td></tr>
<tr><td align="left" balign="left"> + clipRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + setClip(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + getClip() : Shape </td></tr>
<tr><td align="left" balign="left"> + setClip(clip : Shape) </td></tr>
<tr><td align="left" balign="left"> + copyArea(x : int, y : int, width : int, height : int, dx : int, dy : int) </td></tr>
<tr><td align="left" balign="left"> + getTranslateX() : int </td></tr>
<tr><td align="left" balign="left"> + getTranslateY() : int </td></tr>
<tr><td align="left" balign="left"> + setColor(color : int) </td></tr>
<tr><td align="left" balign="left"> + setColor(i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + setPixel(i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + getPixel(i : int, i1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + drawString(s : String, i : int, i1 : int, i2 : int, b : boolean) </td></tr>
<tr><td align="left" balign="left"> + drawString(s : String, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawSubstring(s : String, i : int, i1 : int, i2 : int, i3 : int, i4 : int) </td></tr>
<tr><td align="left" balign="left"> + drawChar(c : char, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawChars(chars : char[], i : int, i1 : int, i2 : int, i3 : int, i4 : int) </td></tr>
<tr><td align="left" balign="left"> + getStrokeStyle() : int </td></tr>
<tr><td align="left" balign="left"> + setStrokeStyle(i : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int, i8 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegion(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int) </td></tr>
<tr><td align="left" balign="left"> + drawImage(image : Image, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawLine(x1 : int, y1 : int, x2 : int, y2 : int) </td></tr>
<tr><td align="left" balign="left"> + fillRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + copyArea(i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int) </td></tr>
<tr><td align="left" balign="left"> + clearRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + drawRoundRect(x : int, y : int, width : int, height : int, arcWidth : int, arcHeight : int) </td></tr>
<tr><td align="left" balign="left"> + fillRoundRect(x : int, y : int, width : int, height : int, arcWidth : int, arcHeight : int) </td></tr>
<tr><td align="left" balign="left"> + drawOval(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + fillOval(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + drawArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + fillArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + drawPolyline(xPoints : int[], yPoints : int[], nPoints : int) </td></tr>
<tr><td align="left" balign="left"> + drawPolygon(xPoints : int[], yPoints : int[], nPoints : int) </td></tr>
<tr><td align="left" balign="left"> + fillPolygon(xPoints : int[], yPoints : int[], nPoints : int) </td></tr>
<tr><td align="left" balign="left"> + drawImage(img : Image, x : int, y : int, observer : ImageObserver) : boolean </td></tr>
<tr><td align="left" balign="left"> + drawImage(img : Image, x : int, y : int, width : int, height : int, observer : ImageObserver) : boolean </td></tr>
<tr><td align="left" balign="left"> + drawImage(img : Image, x : int, y : int, bgcolor : Color, observer : ImageObserver) : boolean </td></tr>
<tr><td align="left" balign="left"> + drawImage(img : Image, x : int, y : int, width : int, height : int, bgcolor : Color, observer : ImageObserver) : boolean </td></tr>
<tr><td align="left" balign="left"> + drawImage(img : Image, dx1 : int, dy1 : int, dx2 : int, dy2 : int, sx1 : int, sy1 : int, sx2 : int, sy2 : int, observer : ImageObserver) : boolean </td></tr>
<tr><td align="left" balign="left"> + drawImage(img : Image, dx1 : int, dy1 : int, dx2 : int, dy2 : int, sx1 : int, sy1 : int, sx2 : int, sy2 : int, bgcolor : Color, observer : ImageObserver) : boolean </td></tr>
<tr><td align="left" balign="left"> + dispose() </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + getWidth() : int </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + getHWDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + setContrast(i : int) </td></tr>
<tr><td align="left" balign="left"> + bitBlt(bytes : byte[], i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int, i8 : int) </td></tr>
<tr><td align="left" balign="left"> + bitBlt(bytes : byte[], i : int, i1 : int, i2 : int, i3 : int, bytes1 : byte[], i4 : int, i5 : int, i6 : int, i7 : int, i8 : int, i9 : int, i10 : int) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefresh(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefreshPeriod(i : int) : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.ev3.motors.BaseRegulatedMotor
	c3 [label=<<table title="ev3dev.actuators.ev3.motors.BaseRegulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> BaseRegulatedMotor </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - speed : int </td></tr>
<tr><td align="left" balign="left"> # acceleration : int </td></tr>
<tr><td align="left" balign="left"> - regulationFlag : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BaseRegulatedMotor(motorPort : String, moveP : float, moveI : float, moveD : float, holdP : float, holdI : float, holdD : float, offset : int, maxSpeed : int) </td></tr>
<tr><td align="left" balign="left"> + suspendRegulation() : boolean </td></tr>
<tr><td align="left" balign="left"> + getTachoCount() : int </td></tr>
<tr><td align="left" balign="left"> + getPosition() : float </td></tr>
<tr><td align="left" balign="left"> + forward() </td></tr>
<tr><td align="left" balign="left"> + backward() </td></tr>
<tr><td align="left" balign="left"> + flt(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + flt() </td></tr>
<tr><td align="left" balign="left"> + brake() </td></tr>
<tr><td align="left" balign="left"> + hold() </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
<tr><td align="left" balign="left"> + stop(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + isMoving() : boolean </td></tr>
<tr><td align="left" balign="left"> + setSpeed(speed : int) </td></tr>
<tr><td align="left" balign="left"> + resetTachoCount() </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : int, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : int) </td></tr>
<tr><td align="left" balign="left"> + rotateTo(limitAngle : int, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + rotateTo(limitAngle : int) </td></tr>
<tr><td align="left" balign="left"> + getSpeed() : int </td></tr>
<tr><td align="left" balign="left"> + isStalled() : boolean </td></tr>
<tr><td align="left" balign="left"> + getRotationSpeed() : int </td></tr>
<tr><td align="left" balign="left"> + addListener(regulatedMotorListener : RegulatedMotorListener) </td></tr>
<tr><td align="left" balign="left"> + removeListener() : RegulatedMotorListener </td></tr>
<tr><td align="left" balign="left"> + waitComplete() </td></tr>
<tr><td align="left" balign="left"> + getMaxSpeed() : float </td></tr>
<tr><td align="left" balign="left"> + setAcceleration(i : int) </td></tr>
<tr><td align="left" balign="left"> + synchronizeWith(regulatedMotors : RegulatedMotor[]) </td></tr>
<tr><td align="left" balign="left"> + startSynchronization() </td></tr>
<tr><td align="left" balign="left"> + endSynchronization() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.ev3.motors.BasicMotor
	c4 [label=<<table title="ev3dev.actuators.ev3.motors.BasicMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> BasicMotor </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - power : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BasicMotor(motorPort : String) </td></tr>
<tr><td align="left" balign="left"> + setPower(power : int) </td></tr>
<tr><td align="left" balign="left"> + getPower() : int </td></tr>
<tr><td align="left" balign="left"> # updateState(newMode : String) </td></tr>
<tr><td align="left" balign="left"> + forward() </td></tr>
<tr><td align="left" balign="left"> + backward() </td></tr>
<tr><td align="left" balign="left"> + isMoving() : boolean </td></tr>
<tr><td align="left" balign="left"> + brake() </td></tr>
<tr><td align="left" balign="left"> + hold() </td></tr>
<tr><td align="left" balign="left"> + flt() </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.ev3.motors.EV3LargeRegulatedMotor
	c5 [label=<<table title="ev3dev.actuators.ev3.motors.EV3LargeRegulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3LargeRegulatedMotor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MOVE_P : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_I : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_D : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_P : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_I : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_D : float </td></tr>
<tr><td align="left" balign="left"> - OFFSET : int </td></tr>
<tr><td align="left" balign="left"> - MAX_SPEED : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3LargeRegulatedMotor(motorPort : String) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.ev3.motors.EV3MediumRegulatedMotor
	c6 [label=<<table title="ev3dev.actuators.ev3.motors.EV3MediumRegulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3MediumRegulatedMotor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MOVE_P : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_I : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_D : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_P : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_I : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_D : float </td></tr>
<tr><td align="left" balign="left"> - OFFSET : int </td></tr>
<tr><td align="left" balign="left"> - MAX_SPEED : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3MediumRegulatedMotor(motorPort : String) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.ev3.motors.NXTRegulatedMotor
	c7 [label=<<table title="ev3dev.actuators.ev3.motors.NXTRegulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NXTRegulatedMotor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MOVE_P : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_I : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_D : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_P : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_I : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_D : float </td></tr>
<tr><td align="left" balign="left"> - OFFSET : int </td></tr>
<tr><td align="left" balign="left"> - MAX_SPEED : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + NXTRegulatedMotor(motorPort : String) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.ev3.motors.UnregulatedMotor
	c8 [label=<<table title="ev3dev.actuators.ev3.motors.UnregulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UnregulatedMotor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UnregulatedMotor(portName : String) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevDevice
	c9 [label=<<table title="ev3dev.hardware.EV3DevDevice" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevDevice </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # LEGO_PORT : String </td></tr>
<tr><td align="left" balign="left"> # ADDRESS : String </td></tr>
<tr><td align="left" balign="left"> # LEGO_SENSOR : String </td></tr>
<tr><td align="left" balign="left"> # MODE : String </td></tr>
<tr><td align="left" balign="left"> # DEVICE : String </td></tr>
<tr><td align="left" balign="left"> # PATH_DEVICE : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevDevice() </td></tr>
<tr><td align="left" balign="left"> # detect(type : String, portName : String) </td></tr>
<tr><td align="left" balign="left"> # getStringAttribute(attribute : String) : String </td></tr>
<tr><td align="left" balign="left"> # getIntegerAttribute(attribute : String) : int </td></tr>
<tr><td align="left" balign="left"> # setStringAttribute(attribute : String, value : String) </td></tr>
<tr><td align="left" balign="left"> # setIntegerAttribute(attribute : String, value : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevFileSystem
	c10 [label=<<table title="ev3dev.hardware.EV3DevFileSystem" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevFileSystem </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DEV_TESTING_KEY : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_ROOT_PATH : String </td></tr>
<tr><td align="left" balign="left"> # ROOT_PATH : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # EV3DevFileSystem() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevMotorDevice
	c11 [label=<<table title="ev3dev.hardware.EV3DevMotorDevice" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevMotorDevice </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # TACHO_MOTOR : String </td></tr>
<tr><td align="left" balign="left"> # DC_MOTOR : String </td></tr>
<tr><td align="left" balign="left"> # AUTO_MODE : String </td></tr>
<tr><td align="left" balign="left"> # POSITION_SP : String </td></tr>
<tr><td align="left" balign="left"> # POSITION : String </td></tr>
<tr><td align="left" balign="left"> # SPEED : String </td></tr>
<tr><td align="left" balign="left"> # DUTY_CYCLE : String </td></tr>
<tr><td align="left" balign="left"> # COMMAND : String </td></tr>
<tr><td align="left" balign="left"> # RUN_FOREVER : String </td></tr>
<tr><td align="left" balign="left"> # RUN_DIRECT : String </td></tr>
<tr><td align="left" balign="left"> # RUN_TO_REL_POS : String </td></tr>
<tr><td align="left" balign="left"> # RUN_TO_ABS_POS : String </td></tr>
<tr><td align="left" balign="left"> # STOP_COMMAND : String </td></tr>
<tr><td align="left" balign="left"> # COAST : String </td></tr>
<tr><td align="left" balign="left"> # BRAKE : String </td></tr>
<tr><td align="left" balign="left"> # HOLD : String </td></tr>
<tr><td align="left" balign="left"> # STOP : String </td></tr>
<tr><td align="left" balign="left"> # RESET : String </td></tr>
<tr><td align="left" balign="left"> # STATE : String </td></tr>
<tr><td align="left" balign="left"> # STATE_RUNNING : String </td></tr>
<tr><td align="left" balign="left"> # STATE_STALLED : String </td></tr>
<tr><td align="left" balign="left"> # POWER : String </td></tr>
<tr><td align="left" balign="left"> # POLARITY : String </td></tr>
<tr><td align="left" balign="left"> # POLARITY_NORMAL : String </td></tr>
<tr><td align="left" balign="left"> # POLARITY_INVERSED : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevMotorDevice() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevPlatform
	c12 [label=<<table title="ev3dev.hardware.EV3DevPlatform" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevPlatform </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevPlatform() </td></tr>
<tr><td align="left" balign="left"> # getPlatform() : EV3DevPlatforms </td></tr>
<tr><td align="left" balign="left"> # getMotorPort(port : String) : String </td></tr>
<tr><td align="left" balign="left"> # getSensorPort(port : String) : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevPlatforms
	c13 [label=<<table title="ev3dev.hardware.EV3DevPlatforms" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> EV3DevPlatforms </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - platform : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> EV3BRICK </td></tr>
<tr><td align="left" balign="left"> PISTORMS </td></tr>
<tr><td align="left" balign="left"> BRICKPI </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevSensorDevice
	c14 [label=<<table title="ev3dev.hardware.EV3DevSensorDevice" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevSensorDevice </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # LEGO_UART_SENSOR : String </td></tr>
<tr><td align="left" balign="left"> # LEGO_ANALOG_SENSOR : String </td></tr>
<tr><td align="left" balign="left"> # SENSOR_MODES : String </td></tr>
<tr><td align="left" balign="left"> # SENSOR_MODE : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # EV3DevSensorDevice(portName : String, mode : String, device : String) </td></tr>
<tr><td align="left" balign="left"> # EV3DevSensorDevice(portName : String, mode : String) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.robotics.tts.Espeak
	c15 [label=<<table title="ev3dev.robotics.tts.Espeak" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Espeak </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - ESPEAK : String </td></tr>
<tr><td align="left" balign="left"> - CMD_APLAY : String </td></tr>
<tr><td align="left" balign="left"> - voice : String </td></tr>
<tr><td align="left" balign="left"> - volume : int </td></tr>
<tr><td align="left" balign="left"> - speedReading : int </td></tr>
<tr><td align="left" balign="left"> - pitch : int </td></tr>
<tr><td align="left" balign="left"> - message : String </td></tr>
<tr><td align="left" balign="left"> - filePath : String </td></tr>
<tr><td align="left" balign="left"> - command : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Espeak() </td></tr>
<tr><td align="left" balign="left"> + setVoice(voice : String) </td></tr>
<tr><td align="left" balign="left"> + setVolume(volume : int) </td></tr>
<tr><td align="left" balign="left"> + setSpeedReading(speed : int) </td></tr>
<tr><td align="left" balign="left"> + setPitch(pitch : int) </td></tr>
<tr><td align="left" balign="left"> + setMessage(message : String) </td></tr>
<tr><td align="left" balign="left"> + setFilePath(filePath : String) </td></tr>
<tr><td align="left" balign="left"> - build() </td></tr>
<tr><td align="left" balign="left"> + say() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.BaseSensor
	c16 [label=<<table title="ev3dev.sensors.BaseSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BaseSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SWITCH_DELAY : int </td></tr>
<tr><td align="left" balign="left"> # currentMode : int </td></tr>
<tr><td align="left" balign="left"> # currentModeS : String </td></tr>
<tr><td align="left" balign="left"> # modes : SensorMode[] </td></tr>
<tr><td align="left" balign="left"> ~ modeList : ArrayList&lt;String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BaseSensor(sensorPort : String, mode : String, device : String) </td></tr>
<tr><td align="left" balign="left"> + BaseSensor(sensorPort : String, mode : String) </td></tr>
<tr><td align="left" balign="left"> # setModes(m : SensorMode[]) </td></tr>
<tr><td align="left" balign="left"> + getAvailableModes() : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getMode(mode : int) : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getMode(modeName : String) : SensorMode </td></tr>
<tr><td align="left" balign="left"> - isValid(mode : int) : boolean </td></tr>
<tr><td align="left" balign="left"> - getIndex(modeName : String) : int </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + setCurrentMode(mode : int) </td></tr>
<tr><td align="left" balign="left"> + setCurrentMode(modeName : String) </td></tr>
<tr><td align="left" balign="left"> + getCurrentMode() : int </td></tr>
<tr><td align="left" balign="left"> + getModeCount() : int </td></tr>
<tr><td align="left" balign="left"> # switchMode(newMode : int, switchDelay : long) </td></tr>
<tr><td align="left" balign="left"> # switchMode(newMode : String, switchDelay : long) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.Battery
	c17 [label=<<table title="ev3dev.sensors.Battery" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Battery </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - BATTERY : String </td></tr>
<tr><td align="left" balign="left"> - BATTERY_EV3 : String </td></tr>
<tr><td align="left" balign="left"> - BATTERY_PISTORMS : String </td></tr>
<tr><td align="left" balign="left"> - BATTERY_BRICKPI : String </td></tr>
<tr><td align="left" balign="left"> - BATTERY_PATH : String </td></tr>
<tr><td align="left" balign="left"> - VOLTAGE : String </td></tr>
<tr><td align="left" balign="left"> - CURRENT : String </td></tr>
<tr><td align="left" balign="left"> - BATTERY_PATH_LOCAL : String </td></tr>
<tr><td align="left" balign="left"> - Instance : Battery </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - Battery() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : Battery </td></tr>
<tr><td align="left" balign="left"> + getVoltageMilliVolt() : int </td></tr>
<tr><td align="left" balign="left"> + getVoltage() : float </td></tr>
<tr><td align="left" balign="left"> + getBatteryCurrent() : float </td></tr>
<tr><td align="left" balign="left"> + getMotorCurrent() : float </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.Button
	c18 [label=<<table title="ev3dev.sensors.Button" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Button </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ENTER : Key </td></tr>
<tr><td align="left" balign="left"> + LEFT : Key </td></tr>
<tr><td align="left" balign="left"> + RIGHT : Key </td></tr>
<tr><td align="left" balign="left"> + ESCAPE : Key </td></tr>
<tr><td align="left" balign="left"> + UP : Key </td></tr>
<tr><td align="left" balign="left"> + DOWN : Key </td></tr>
<tr><td align="left" balign="left"> - ALL : Key </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Button() </td></tr>
<tr><td align="left" balign="left"> + waitForAnyEvent() : int </td></tr>
<tr><td align="left" balign="left"> + waitForAnyEvent(timeout : int) : int </td></tr>
<tr><td align="left" balign="left"> + waitForAnyPress(timeout : int) : int </td></tr>
<tr><td align="left" balign="left"> + waitForAnyPress() : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.EV3Key
	c19 [label=<<table title="ev3dev.sensors.EV3Key" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3Key </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BUTTON_UP : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_DOWN : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_LEFT : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_RIGHT : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_ENTER : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_BACKSPACE : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_ALL : int </td></tr>
<tr><td align="left" balign="left"> - button : EV3Key.ButtonType </td></tr>
<tr><td align="left" balign="left"> - file : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3Key(button : EV3Key.ButtonType) </td></tr>
<tr><td align="left" balign="left"> - getButtonPress() : EV3Key.ButtonType </td></tr>
<tr><td align="left" balign="left"> + getId() : int </td></tr>
<tr><td align="left" balign="left"> + isDown() : boolean </td></tr>
<tr><td align="left" balign="left"> + isUp() : boolean </td></tr>
<tr><td align="left" balign="left"> + waitForPress() </td></tr>
<tr><td align="left" balign="left"> + waitForPressAndRelease() </td></tr>
<tr><td align="left" balign="left"> + addKeyListener(listener : KeyListener) </td></tr>
<tr><td align="left" balign="left"> + simulateEvent(event : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.EV3Key.ButtonPress
	c20 [label=<<table title="ev3dev.sensors.EV3Key.ButtonPress" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ButtonPress </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - type : short </td></tr>
<tr><td align="left" balign="left"> - code : short </td></tr>
<tr><td align="left" balign="left"> - value : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - ButtonPress(is : FileInputStream) </td></tr>
<tr><td align="left" balign="left"> - getType() : short </td></tr>
<tr><td align="left" balign="left"> - getCode() : short </td></tr>
<tr><td align="left" balign="left"> - getValue() : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.EV3Key.ButtonType
	c21 [label=<<table title="ev3dev.sensors.EV3Key.ButtonType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> ButtonType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - value : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> UP </td></tr>
<tr><td align="left" balign="left"> DOWN </td></tr>
<tr><td align="left" balign="left"> LEFT </td></tr>
<tr><td align="left" balign="left"> RIGHT </td></tr>
<tr><td align="left" balign="left"> ENTER </td></tr>
<tr><td align="left" balign="left"> BACKSPACE </td></tr>
<tr><td align="left" balign="left"> ALL </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.SensorMode
	c22 [label=<<table title="ev3dev.sensors.SensorMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> SensorMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getName() : String </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.SensorModes
	c23 [label=<<table title="ev3dev.sensors.SensorModes" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> SensorModes </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getAvailableModes() : ArrayList&lt;String&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getMode(mode : int) : SensorMode </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getMode(modeName : String) : SensorMode </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setCurrentMode(mode : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setCurrentMode(modeName : String) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getCurrentMode() : int </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getModeCount() : int </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3ColorSensor
	c24 [label=<<table title="ev3dev.sensors.ev3.EV3ColorSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3ColorSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # colorMap : int[] </td></tr>
<tr><td align="left" balign="left"> - LEGO_EV3_COLOR_SENSOR : String </td></tr>
<tr><td align="left" balign="left"> - COL_RESET : String </td></tr>
<tr><td align="left" balign="left"> - COL_REFLECT : String </td></tr>
<tr><td align="left" balign="left"> - COL_AMBIENT : String </td></tr>
<tr><td align="left" balign="left"> - COL_COLOR : String </td></tr>
<tr><td align="left" balign="left"> # COL_REFRAW : String </td></tr>
<tr><td align="left" balign="left"> - COL_RGBRAW : String </td></tr>
<tr><td align="left" balign="left"> # COL_CAL : String </td></tr>
<tr><td align="left" balign="left"> - lightColor : int[] </td></tr>
<tr><td align="left" balign="left"> # raw : short[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3ColorSensor(portName : String) </td></tr>
<tr><td align="left" balign="left"> - initModes() </td></tr>
<tr><td align="left" balign="left"> + getColorID() : int </td></tr>
<tr><td align="left" balign="left"> + setFloodlight(floodlight : boolean) </td></tr>
<tr><td align="left" balign="left"> + isFloodlightOn() : boolean </td></tr>
<tr><td align="left" balign="left"> + getFloodlight() : int </td></tr>
<tr><td align="left" balign="left"> + setFloodlight(color : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + getColorIDMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getRedMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getAmbientMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getRGBMode() : SensorMode </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3ColorSensor.ColorIDMode
	c25 [label=<<table title="ev3dev.sensors.ev3.EV3ColorSensor.ColorIDMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ColorIDMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ColorIDMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3ColorSensor.RedMode
	c26 [label=<<table title="ev3dev.sensors.ev3.EV3ColorSensor.RedMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RedMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RedMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3ColorSensor.AmbientMode
	c27 [label=<<table title="ev3dev.sensors.ev3.EV3ColorSensor.AmbientMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AmbientMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AmbientMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3ColorSensor.RGBMode
	c28 [label=<<table title="ev3dev.sensors.ev3.EV3ColorSensor.RGBMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RGBMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RGBMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3DevSensorMode
	c29 [label=<<table title="ev3dev.sensors.ev3.EV3DevSensorMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevSensorMode </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ VALUE0 : String </td></tr>
<tr><td align="left" balign="left"> ~ VALUE1 : String </td></tr>
<tr><td align="left" balign="left"> ~ VALUE2 : String </td></tr>
<tr><td align="left" balign="left"> ~ VALUE3 : String </td></tr>
<tr><td align="left" balign="left"> ~ VALUE4 : String </td></tr>
<tr><td align="left" balign="left"> ~ VALUE5 : String </td></tr>
<tr><td align="left" balign="left"> ~ VALUE6 : String </td></tr>
<tr><td align="left" balign="left"> ~ VALUE7 : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ EV3DevSensorMode() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3GyroSensor
	c30 [label=<<table title="ev3dev.sensors.ev3.EV3GyroSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3GyroSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LEGO_EV3_GYRO : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3GyroSensor(portName : String) </td></tr>
<tr><td align="left" balign="left"> + getRateMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + getAngleMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + getAngleAndRateMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + getAngle() : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3GyroSensor.RateMode
	c31 [label=<<table title="ev3dev.sensors.ev3.EV3GyroSensor.RateMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RateMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MODE : String </td></tr>
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RateMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3GyroSensor.AngleMode
	c32 [label=<<table title="ev3dev.sensors.ev3.EV3GyroSensor.AngleMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AngleMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MODE : String </td></tr>
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AngleMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3GyroSensor.RateAndAngleMode
	c33 [label=<<table title="ev3dev.sensors.ev3.EV3GyroSensor.RateAndAngleMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RateAndAngleMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MODE : String </td></tr>
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RateAndAngleMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3IRSensor
	c34 [label=<<table title="ev3dev.sensors.ev3.EV3IRSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3IRSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LEGO_EV3_IR : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3IRSensor(portName : String) </td></tr>
<tr><td align="left" balign="left"> - init() </td></tr>
<tr><td align="left" balign="left"> + getDistanceMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getSeekMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getRemoteMode() : SensorMode </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3IRSensor.DistanceMode
	c35 [label=<<table title="ev3dev.sensors.ev3.EV3IRSensor.DistanceMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DistanceMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MODE : String </td></tr>
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DistanceMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3IRSensor.SeekMode
	c36 [label=<<table title="ev3dev.sensors.ev3.EV3IRSensor.SeekMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SeekMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MODE : String </td></tr>
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SeekMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3IRSensor.RemoteMode
	c37 [label=<<table title="ev3dev.sensors.ev3.EV3IRSensor.RemoteMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RemoteMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MODE : String </td></tr>
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RemoteMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3TouchSensor
	c38 [label=<<table title="ev3dev.sensors.ev3.EV3TouchSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3TouchSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LEGO_EV3_TOUCH : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3TouchSensor(portName : String) </td></tr>
<tr><td align="left" balign="left"> - init() </td></tr>
<tr><td align="left" balign="left"> + getTouchMode() : SensorMode </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3TouchSensor.TouchMode
	c39 [label=<<table title="ev3dev.sensors.ev3.EV3TouchSensor.TouchMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TouchMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TouchMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3UltrasonicSensor
	c40 [label=<<table title="ev3dev.sensors.ev3.EV3UltrasonicSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3UltrasonicSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - DISABLED : int </td></tr>
<tr><td align="left" balign="left"> - LEGO_EV3_US : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3UltrasonicSensor(portName : String) </td></tr>
<tr><td align="left" balign="left"> - init() </td></tr>
<tr><td align="left" balign="left"> + getListenMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + getDistanceMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + enable() </td></tr>
<tr><td align="left" balign="left"> + disable() </td></tr>
<tr><td align="left" balign="left"> + isEnabled() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3UltrasonicSensor.DistanceMode
	c41 [label=<<table title="ev3dev.sensors.ev3.EV3UltrasonicSensor.DistanceMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DistanceMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MODE : String </td></tr>
<tr><td align="left" balign="left"> - toSI : float </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DistanceMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3UltrasonicSensor.ListenMode
	c42 [label=<<table title="ev3dev.sensors.ev3.EV3UltrasonicSensor.ListenMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ListenMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MODE : String </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ListenMode(pathDevice : File) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.utils.Shell
	c43 [label=<<table title="ev3dev.utils.Shell" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Shell </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Shell() </td></tr>
<tr><td align="left" balign="left"> + execute(command : String) : String </td></tr>
<tr><td align="left" balign="left"> + execute(command : String[]) : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.utils.Sysfs
	c44 [label=<<table title="ev3dev.utils.Sysfs" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sysfs </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Sysfs() </td></tr>
<tr><td align="left" balign="left"> + writeString(filePath : String, value : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + writeInteger(filePath : String, value : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + readString(filePath : String) : String </td></tr>
<tr><td align="left" balign="left"> + readInteger(filePath : String) : int </td></tr>
<tr><td align="left" balign="left"> + readFloat(filePath : String) : float </td></tr>
<tr><td align="left" balign="left"> + getElements(filePath : String) : List&lt;File&gt; </td></tr>
<tr><td align="left" balign="left"> + existPath(filePath : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + existFile(pathToFind : Path) : boolean </td></tr>
<tr><td align="left" balign="left"> + writeBytes(path : String, value : byte[]) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//ev3dev.actuators.ev3.Sound extends ev3dev.hardware.EV3DevDevice
	c9:p -> c1:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.ev3.lcd.EV3GraphicsLCD extends java.awt.Graphics2D
	c45:p -> c2:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.ev3.motors.BaseRegulatedMotor extends ev3dev.hardware.EV3DevMotorDevice
	c11:p -> c3:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.ev3.motors.BasicMotor extends ev3dev.hardware.EV3DevMotorDevice
	c11:p -> c4:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.ev3.motors.EV3LargeRegulatedMotor extends ev3dev.actuators.ev3.motors.BaseRegulatedMotor
	c3:p -> c5:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.ev3.motors.EV3MediumRegulatedMotor extends ev3dev.actuators.ev3.motors.BaseRegulatedMotor
	c3:p -> c6:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.ev3.motors.NXTRegulatedMotor extends ev3dev.actuators.ev3.motors.BaseRegulatedMotor
	c3:p -> c7:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.ev3.motors.UnregulatedMotor extends ev3dev.actuators.ev3.motors.BasicMotor
	c4:p -> c8:p [dir=back,arrowtail=empty];
	//ev3dev.hardware.EV3DevDevice extends ev3dev.hardware.EV3DevPlatform
	c12:p -> c9:p [dir=back,arrowtail=empty];
	//ev3dev.hardware.EV3DevMotorDevice extends ev3dev.hardware.EV3DevDevice
	c9:p -> c11:p [dir=back,arrowtail=empty];
	//ev3dev.hardware.EV3DevPlatform extends ev3dev.hardware.EV3DevFileSystem
	c10:p -> c12:p [dir=back,arrowtail=empty];
	//ev3dev.hardware.EV3DevSensorDevice extends ev3dev.hardware.EV3DevDevice
	c9:p -> c14:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.BaseSensor extends ev3dev.hardware.EV3DevSensorDevice
	c14:p -> c16:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.BaseSensor implements ev3dev.sensors.SensorModes
	c23:p -> c16:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.Battery extends ev3dev.hardware.EV3DevDevice
	c9:p -> c17:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.SensorModes implements ev3dev.sensors.SensorMode
	c22:p -> c23:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.ev3.EV3ColorSensor extends ev3dev.sensors.BaseSensor
	c16:p -> c24:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3ColorSensor.ColorIDMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c25:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3ColorSensor.RedMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c26:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3ColorSensor.AmbientMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c27:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3ColorSensor.RGBMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c28:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3DevSensorMode implements ev3dev.sensors.SensorMode
	c22:p -> c29:p [dir=back,arrowtail=empty,style=dashed];
	//ev3dev.sensors.ev3.EV3GyroSensor extends ev3dev.sensors.BaseSensor
	c16:p -> c30:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3GyroSensor.RateMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c31:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3GyroSensor.AngleMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c32:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3GyroSensor.RateAndAngleMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c33:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3IRSensor extends ev3dev.sensors.BaseSensor
	c16:p -> c34:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3IRSensor.DistanceMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c35:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3IRSensor.SeekMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c36:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3IRSensor.RemoteMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c37:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3TouchSensor extends ev3dev.sensors.BaseSensor
	c16:p -> c38:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3TouchSensor.TouchMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c39:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3UltrasonicSensor extends ev3dev.sensors.BaseSensor
	c16:p -> c40:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3UltrasonicSensor.DistanceMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c41:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3UltrasonicSensor.ListenMode extends ev3dev.sensors.ev3.EV3DevSensorMode
	c29:p -> c42:p [dir=back,arrowtail=empty];
	// java.awt.Graphics2D
	c45 [label=<<table title="java.awt.Graphics2D" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Graphics2D.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Graphics2D </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Graphics2D() </td></tr>
<tr><td align="left" balign="left"> + draw3DRect(arg0 : int, arg1 : int, arg2 : int, arg3 : int, arg4 : boolean) </td></tr>
<tr><td align="left" balign="left"> + fill3DRect(arg0 : int, arg1 : int, arg2 : int, arg3 : int, arg4 : boolean) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + draw(arg0 : Shape) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + drawImage(arg0 : Image, arg1 : AffineTransform, arg2 : ImageObserver) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + drawImage(arg0 : BufferedImage, arg1 : BufferedImageOp, arg2 : int, arg3 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + drawRenderedImage(arg0 : RenderedImage, arg1 : AffineTransform) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + drawRenderableImage(arg0 : RenderableImage, arg1 : AffineTransform) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + drawString(arg0 : String, arg1 : int, arg2 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + drawString(arg0 : String, arg1 : float, arg2 : float) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + drawString(arg0 : AttributedCharacterIterator, arg1 : int, arg2 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + drawString(arg0 : AttributedCharacterIterator, arg1 : float, arg2 : float) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + drawGlyphVector(arg0 : GlyphVector, arg1 : float, arg2 : float) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + fill(arg0 : Shape) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + hit(arg0 : Rectangle, arg1 : Shape, arg2 : boolean) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getDeviceConfiguration() : GraphicsConfiguration </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setComposite(arg0 : Composite) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setPaint(arg0 : Paint) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setStroke(arg0 : Stroke) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setRenderingHint(arg0 : RenderingHints.Key, arg1 : Object) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getRenderingHint(arg0 : RenderingHints.Key) : Object </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setRenderingHints(arg0 : Map&lt;?, ?&gt;) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + addRenderingHints(arg0 : Map&lt;?, ?&gt;) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getRenderingHints() : RenderingHints </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + translate(arg0 : int, arg1 : int) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + translate(arg0 : double, arg1 : double) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + rotate(arg0 : double) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + rotate(arg0 : double, arg1 : double, arg2 : double) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + scale(arg0 : double, arg1 : double) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + shear(arg0 : double, arg1 : double) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + transform(arg0 : AffineTransform) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setTransform(arg0 : AffineTransform) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getTransform() : AffineTransform </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getPaint() : Paint </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getComposite() : Composite </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + setBackground(arg0 : Color) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getBackground() : Color </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getStroke() : Stroke </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + clip(arg0 : Shape) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getFontRenderContext() : FontRenderContext </font></td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Graphics2D.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

