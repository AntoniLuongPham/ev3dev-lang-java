#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// ev3dev.actuators.LCD
	c0 [label=<<table title="ev3dev.actuators.LCD" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LCD </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_EV3_DEVICES_PATH : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_EV3_LCD_NAME : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_EV3_LCD_PATH : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_LCD_KEY : String </td></tr>
<tr><td align="left" balign="left"> + FB_PATH : String </td></tr>
<tr><td align="left" balign="left"> - SCREEN_WIDTH : int </td></tr>
<tr><td align="left" balign="left"> - SCREEN_HEIGHT : int </td></tr>
<tr><td align="left" balign="left"> - LINE_LEN : int </td></tr>
<tr><td align="left" balign="left"> - BUFFER_SIZE : int </td></tr>
<tr><td align="left" balign="left"> + EV3_SCREEN_WIDTH : int </td></tr>
<tr><td align="left" balign="left"> + EV3_SCREEN_HEIGHT : int </td></tr>
<tr><td align="left" balign="left"> + EV3_LINE_LEN : int </td></tr>
<tr><td align="left" balign="left"> + EV3_ROWS : int </td></tr>
<tr><td align="left" balign="left"> + EV3_BUFFER_SIZE : int </td></tr>
<tr><td align="left" balign="left"> - image : BufferedImage </td></tr>
<tr><td align="left" balign="left"> - g2d : Graphics2D </td></tr>
<tr><td align="left" balign="left"> - instance : GraphicsLCD </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LCD() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : GraphicsLCD </td></tr>
<tr><td align="left" balign="left"> - init(width : int, height : int, lineLength : int, bufferSize : int) </td></tr>
<tr><td align="left" balign="left"> + getImage() : BufferedImage </td></tr>
<tr><td align="left" balign="left"> + flush() </td></tr>
<tr><td align="left" balign="left"> + translate(x : int, y : int) </td></tr>
<tr><td align="left" balign="left"> + getFont() : Font </td></tr>
<tr><td align="left" balign="left"> + setFont(font : Font) </td></tr>
<tr><td align="left" balign="left"> + getTranslateX() : int </td></tr>
<tr><td align="left" balign="left"> + getTranslateY() : int </td></tr>
<tr><td align="left" balign="left"> + setColor(color : int) </td></tr>
<tr><td align="left" balign="left"> + setColor(i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + setPixel(i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + getPixel(i : int, i1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + drawString(s : String, i : int, i1 : int, i2 : int, b : boolean) </td></tr>
<tr><td align="left" balign="left"> + drawString(s : String, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawSubstring(s : String, i : int, i1 : int, i2 : int, i3 : int, i4 : int) </td></tr>
<tr><td align="left" balign="left"> + drawChar(c : char, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawChars(chars : char[], i : int, i1 : int, i2 : int, i3 : int, i4 : int) </td></tr>
<tr><td align="left" balign="left"> + getStrokeStyle() : int </td></tr>
<tr><td align="left" balign="left"> + setStrokeStyle(i : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int, i8 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegion(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int) </td></tr>
<tr><td align="left" balign="left"> + drawImage(image : Image, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawLine(x1 : int, y1 : int, x2 : int, y2 : int) </td></tr>
<tr><td align="left" balign="left"> + fillRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + copyArea(i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRoundRect(x : int, y : int, width : int, height : int, arcWidth : int, arcHeight : int) </td></tr>
<tr><td align="left" balign="left"> + drawRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + drawArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + fillArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + getWidth() : int </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + getHWDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + setContrast(i : int) </td></tr>
<tr><td align="left" balign="left"> + bitBlt(bytes : byte[], i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int, i8 : int) </td></tr>
<tr><td align="left" balign="left"> + bitBlt(bytes : byte[], i : int, i1 : int, i2 : int, i3 : int, bytes1 : byte[], i4 : int, i5 : int, i6 : int, i7 : int, i8 : int, i9 : int, i10 : int) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefresh(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefreshPeriod(i : int) : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.Sound
	c1 [label=<<table title="ev3dev.actuators.Sound" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sound </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOGGER : Logger </td></tr>
<tr><td align="left" balign="left"> - EV3_PHYSICAL_SOUND_PATH : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_SOUND_KEY : String </td></tr>
<tr><td align="left" balign="left"> - EV3_SOUND_PATH : String </td></tr>
<tr><td align="left" balign="left"> - CMD_BEEP : String </td></tr>
<tr><td align="left" balign="left"> + VOLUME : String </td></tr>
<tr><td align="left" balign="left"> - VOLUME_PATH : String </td></tr>
<tr><td align="left" balign="left"> - DISABLED_FEATURE_MESSAGE : String </td></tr>
<tr><td align="left" balign="left"> - instance : Sound </td></tr>
<tr><td align="left" balign="left"> - volume : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - Sound() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : Sound </td></tr>
<tr><td align="left" balign="left"> + beep() </td></tr>
<tr><td align="left" balign="left"> + twoBeeps() </td></tr>
<tr><td align="left" balign="left"> + playTone(frequency : int, duration : int, volume : int) </td></tr>
<tr><td align="left" balign="left"> + playTone(frequency : int, duration : int) </td></tr>
<tr><td align="left" balign="left"> + playSample(file : File, volume : int) </td></tr>
<tr><td align="left" balign="left"> + playSample(file : File) </td></tr>
<tr><td align="left" balign="left"> + setVolume(volume : int) </td></tr>
<tr><td align="left" balign="left"> + getVolume() : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.ev3.EV3Led
	c2 [label=<<table title="ev3dev.actuators.ev3.EV3Led" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3Led </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> + LEFT : int </td></tr>
<tr><td align="left" balign="left"> + RIGHT : int </td></tr>
<tr><td align="left" balign="left"> - direction : int </td></tr>
<tr><td align="left" balign="left"> + LEFT_LED : String </td></tr>
<tr><td align="left" balign="left"> + RIGHT_LED : String </td></tr>
<tr><td align="left" balign="left"> + RED_LED : String </td></tr>
<tr><td align="left" balign="left"> + GREEN_LED : String </td></tr>
<tr><td align="left" balign="left"> + BRIGHTNESS : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3Led(button : int) </td></tr>
<tr><td align="left" balign="left"> + setPattern(pattern : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.lego.motors.BaseRegulatedMotor
	c3 [label=<<table title="ev3dev.actuators.lego.motors.BaseRegulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> BaseRegulatedMotor </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> # MAX_SPEED_AT_9V : int </td></tr>
<tr><td align="left" balign="left"> - speed : int </td></tr>
<tr><td align="left" balign="left"> # acceleration : int </td></tr>
<tr><td align="left" balign="left"> - regulationFlag : boolean </td></tr>
<tr><td align="left" balign="left"> - listenerList : List&lt;RegulatedMotorListener&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BaseRegulatedMotor(motorPort : Port, moveP : float, moveI : float, moveD : float, holdP : float, holdI : float, holdD : float, offset : int, maxSpeed : int) </td></tr>
<tr><td align="left" balign="left"> + suspendRegulation() : boolean </td></tr>
<tr><td align="left" balign="left"> + getTachoCount() : int </td></tr>
<tr><td align="left" balign="left"> + getPosition() : float </td></tr>
<tr><td align="left" balign="left"> + forward() </td></tr>
<tr><td align="left" balign="left"> + backward() </td></tr>
<tr><td align="left" balign="left"> + flt(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + flt() </td></tr>
<tr><td align="left" balign="left"> + coast() </td></tr>
<tr><td align="left" balign="left"> + brake() </td></tr>
<tr><td align="left" balign="left"> + hold() </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
<tr><td align="left" balign="left"> + stop(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + isMoving() : boolean </td></tr>
<tr><td align="left" balign="left"> + setSpeed(speed : int) </td></tr>
<tr><td align="left" balign="left"> + resetTachoCount() </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : int, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : int) </td></tr>
<tr><td align="left" balign="left"> + rotateTo(limitAngle : int, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + rotateTo(limitAngle : int) </td></tr>
<tr><td align="left" balign="left"> + getSpeed() : int </td></tr>
<tr><td align="left" balign="left"> + isStalled() : boolean </td></tr>
<tr><td align="left" balign="left"> + getRotationSpeed() : int </td></tr>
<tr><td align="left" balign="left"> + addListener(regulatedMotorListener : RegulatedMotorListener) </td></tr>
<tr><td align="left" balign="left"> + removeListener() : RegulatedMotorListener </td></tr>
<tr><td align="left" balign="left"> + waitComplete() </td></tr>
<tr><td align="left" balign="left"> + getMaxSpeed() : float </td></tr>
<tr><td align="left" balign="left"> + setAcceleration(acceleration : int) </td></tr>
<tr><td align="left" balign="left"> + synchronizeWith(regulatedMotors : RegulatedMotor[]) </td></tr>
<tr><td align="left" balign="left"> + startSynchronization() </td></tr>
<tr><td align="left" balign="left"> + endSynchronization() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.lego.motors.BasicMotor
	c4 [label=<<table title="ev3dev.actuators.lego.motors.BasicMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> BasicMotor </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> - power : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BasicMotor(motorPort : Port) </td></tr>
<tr><td align="left" balign="left"> + setPower(power : int) </td></tr>
<tr><td align="left" balign="left"> + getPower() : int </td></tr>
<tr><td align="left" balign="left"> # updateState(newMode : String) </td></tr>
<tr><td align="left" balign="left"> + forward() </td></tr>
<tr><td align="left" balign="left"> + backward() </td></tr>
<tr><td align="left" balign="left"> + isMoving() : boolean </td></tr>
<tr><td align="left" balign="left"> + flt() </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.lego.motors.EV3LargeRegulatedMotor
	c5 [label=<<table title="ev3dev.actuators.lego.motors.EV3LargeRegulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3LargeRegulatedMotor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MOVE_P : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_I : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_D : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_P : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_I : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_D : float </td></tr>
<tr><td align="left" balign="left"> - OFFSET : int </td></tr>
<tr><td align="left" balign="left"> - MAX_SPEED : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3LargeRegulatedMotor(motorPort : Port) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.lego.motors.EV3MediumRegulatedMotor
	c6 [label=<<table title="ev3dev.actuators.lego.motors.EV3MediumRegulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3MediumRegulatedMotor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MOVE_P : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_I : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_D : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_P : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_I : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_D : float </td></tr>
<tr><td align="left" balign="left"> - OFFSET : int </td></tr>
<tr><td align="left" balign="left"> - MAX_SPEED : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3MediumRegulatedMotor(motorPort : Port) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.lego.motors.Motor
	c7 [label=<<table title="ev3dev.actuators.lego.motors.Motor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Motor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + A : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> + B : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> + C : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> + D : RegulatedMotor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - Motor() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.lego.motors.NXTRegulatedMotor
	c8 [label=<<table title="ev3dev.actuators.lego.motors.NXTRegulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NXTRegulatedMotor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MOVE_P : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_I : float </td></tr>
<tr><td align="left" balign="left"> - MOVE_D : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_P : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_I : float </td></tr>
<tr><td align="left" balign="left"> - HOLD_D : float </td></tr>
<tr><td align="left" balign="left"> - OFFSET : int </td></tr>
<tr><td align="left" balign="left"> - MAX_SPEED : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + NXTRegulatedMotor(motorPort : Port) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.actuators.lego.motors.UnregulatedMotor
	c9 [label=<<table title="ev3dev.actuators.lego.motors.UnregulatedMotor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UnregulatedMotor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UnregulatedMotor(portName : Port) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevDevice
	c10 [label=<<table title="ev3dev.hardware.EV3DevDevice" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevDevice </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOGGER : Logger </td></tr>
<tr><td align="left" balign="left"> # ev3DevProperties : Properties </td></tr>
<tr><td align="left" balign="left"> # CURRENT_PLATFORM : EV3DevPlatform </td></tr>
<tr><td align="left" balign="left"> # LEGO_PORT : String </td></tr>
<tr><td align="left" balign="left"> # ADDRESS : String </td></tr>
<tr><td align="left" balign="left"> # LEGO_SENSOR : String </td></tr>
<tr><td align="left" balign="left"> # MODE : String </td></tr>
<tr><td align="left" balign="left"> # DEVICE : String </td></tr>
<tr><td align="left" balign="left"> # PATH_DEVICE : File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevDevice() </td></tr>
<tr><td align="left" balign="left"> # detect(type : String, portName : String) </td></tr>
<tr><td align="left" balign="left"> # getStringAttribute(attribute : String) : String </td></tr>
<tr><td align="left" balign="left"> # getIntegerAttribute(attribute : String) : int </td></tr>
<tr><td align="left" balign="left"> # setStringAttribute(attribute : String, value : String) </td></tr>
<tr><td align="left" balign="left"> # setIntegerAttribute(attribute : String, value : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevDistro
	c11 [label=<<table title="ev3dev.hardware.EV3DevDistro" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> EV3DevDistro </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> JESSIE </td></tr>
<tr><td align="left" balign="left"> STRETCH </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevDistros
	c12 [label=<<table title="ev3dev.hardware.EV3DevDistros" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3DevDistros </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOGGER : Logger </td></tr>
<tr><td align="left" balign="left"> - DEBIAN_DISTRO_DETECTION_QUERY : String </td></tr>
<tr><td align="left" balign="left"> - STRETCH_DISTRO_DETECTION_QUERY : String </td></tr>
<tr><td align="left" balign="left"> - JESSIE_DISTRO_DETECTION_QUERY : String </td></tr>
<tr><td align="left" balign="left"> - CURRENT_DISTRO : EV3DevDistro </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevDistros() </td></tr>
<tr><td align="left" balign="left"> - retrieveDistro() : EV3DevDistro </td></tr>
<tr><td align="left" balign="left"> + getDistro() : EV3DevDistro </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevFileSystem
	c13 [label=<<table title="ev3dev.hardware.EV3DevFileSystem" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3DevFileSystem </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOGGER : Logger </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_TESTING_KEY : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_ROOT_PATH : String </td></tr>
<tr><td align="left" balign="left"> - CURRENT_ROOT_PATH : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevFileSystem() </td></tr>
<tr><td align="left" balign="left"> - retrieveRootPath() : String </td></tr>
<tr><td align="left" balign="left"> + getRootPath() : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevMotorDevice
	c14 [label=<<table title="ev3dev.hardware.EV3DevMotorDevice" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevMotorDevice </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # TACHO_MOTOR : String </td></tr>
<tr><td align="left" balign="left"> # DC_MOTOR : String </td></tr>
<tr><td align="left" balign="left"> # AUTO_MODE : String </td></tr>
<tr><td align="left" balign="left"> # POSITION_SP : String </td></tr>
<tr><td align="left" balign="left"> # POSITION : String </td></tr>
<tr><td align="left" balign="left"> # SPEED : String </td></tr>
<tr><td align="left" balign="left"> # DUTY_CYCLE : String </td></tr>
<tr><td align="left" balign="left"> # COMMAND : String </td></tr>
<tr><td align="left" balign="left"> # RUN_FOREVER : String </td></tr>
<tr><td align="left" balign="left"> # RUN_DIRECT : String </td></tr>
<tr><td align="left" balign="left"> # RUN_TO_REL_POS : String </td></tr>
<tr><td align="left" balign="left"> # RUN_TO_ABS_POS : String </td></tr>
<tr><td align="left" balign="left"> # STOP_COMMAND : String </td></tr>
<tr><td align="left" balign="left"> # COAST : String </td></tr>
<tr><td align="left" balign="left"> # BRAKE : String </td></tr>
<tr><td align="left" balign="left"> # HOLD : String </td></tr>
<tr><td align="left" balign="left"> # STOP : String </td></tr>
<tr><td align="left" balign="left"> # RESET : String </td></tr>
<tr><td align="left" balign="left"> # STATE : String </td></tr>
<tr><td align="left" balign="left"> # STATE_RUNNING : String </td></tr>
<tr><td align="left" balign="left"> # STATE_STALLED : String </td></tr>
<tr><td align="left" balign="left"> # POWER : String </td></tr>
<tr><td align="left" balign="left"> # POLARITY : String </td></tr>
<tr><td align="left" balign="left"> # POLARITY_NORMAL : String </td></tr>
<tr><td align="left" balign="left"> # POLARITY_INVERSED : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevMotorDevice() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevPlatform
	c15 [label=<<table title="ev3dev.hardware.EV3DevPlatform" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> EV3DevPlatform </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - platform : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> EV3BRICK </td></tr>
<tr><td align="left" balign="left"> PISTORMS </td></tr>
<tr><td align="left" balign="left"> BRICKPI </td></tr>
<tr><td align="left" balign="left"> BRICKPI3 </td></tr>
<tr><td align="left" balign="left"> UNKNOWN </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevPlatforms
	c16 [label=<<table title="ev3dev.hardware.EV3DevPlatforms" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3DevPlatforms </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOGGER : Logger </td></tr>
<tr><td align="left" balign="left"> - ev3DevProperties : Properties </td></tr>
<tr><td align="left" balign="left"> - CURRENT_PLATFORM : EV3DevPlatform </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevPlatforms() </td></tr>
<tr><td align="left" balign="left"> - retrievePlatform() : EV3DevPlatform </td></tr>
<tr><td align="left" balign="left"> + getPlatform() : EV3DevPlatform </td></tr>
<tr><td align="left" balign="left"> + getMotorPort(port : Port) : String </td></tr>
<tr><td align="left" balign="left"> + getSensorPort(port : Port) : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevPropertyLoader
	c17 [label=<<table title="ev3dev.hardware.EV3DevPropertyLoader" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3DevPropertyLoader </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOGGER : Logger </td></tr>
<tr><td align="left" balign="left"> - ev3DevProperties : Properties </td></tr>
<tr><td align="left" balign="left"> - STRETCH_PROPERTY_FILENAME : String </td></tr>
<tr><td align="left" balign="left"> - JESSIE_PROPERTY_FILENAME : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevPropertyLoader() </td></tr>
<tr><td align="left" balign="left"> - retrieveEV3DevProperties() : Properties </td></tr>
<tr><td align="left" balign="left"> + getEV3DevProperties() : Properties </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.hardware.EV3DevSensorDevice
	c18 [label=<<table title="ev3dev.hardware.EV3DevSensorDevice" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevSensorDevice </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> # LEGO_UART_SENSOR : String </td></tr>
<tr><td align="left" balign="left"> # LEGO_ANALOG_SENSOR : String </td></tr>
<tr><td align="left" balign="left"> # LEGO_I2C : String </td></tr>
<tr><td align="left" balign="left"> # SENSOR_MODES : String </td></tr>
<tr><td align="left" balign="left"> # SENSOR_MODE : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # EV3DevSensorDevice(portName : Port, mode : String, device : String) </td></tr>
<tr><td align="left" balign="left"> # EV3DevSensorDevice(portName : Port, mode : String) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.robotics.tts.Espeak
	c19 [label=<<table title="ev3dev.robotics.tts.Espeak" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Espeak </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> - ESPEAK : String </td></tr>
<tr><td align="left" balign="left"> - CMD_APLAY : String </td></tr>
<tr><td align="left" balign="left"> + VOICE_ENGLISH : String </td></tr>
<tr><td align="left" balign="left"> + VOICE_SPANISH : String </td></tr>
<tr><td align="left" balign="left"> + DEFAULT_SPEED_READING : int </td></tr>
<tr><td align="left" balign="left"> + DEFAULT_PITCH : int </td></tr>
<tr><td align="left" balign="left"> - voice : String </td></tr>
<tr><td align="left" balign="left"> - volume : int </td></tr>
<tr><td align="left" balign="left"> - speedReading : int </td></tr>
<tr><td align="left" balign="left"> - pitch : int </td></tr>
<tr><td align="left" balign="left"> - message : String </td></tr>
<tr><td align="left" balign="left"> - filePath : String </td></tr>
<tr><td align="left" balign="left"> - command : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Espeak() </td></tr>
<tr><td align="left" balign="left"> + setVoice(voice : String) </td></tr>
<tr><td align="left" balign="left"> + setVolume(volume : int) </td></tr>
<tr><td align="left" balign="left"> + setSpeedReading(speed : int) </td></tr>
<tr><td align="left" balign="left"> + setPitch(pitch : int) </td></tr>
<tr><td align="left" balign="left"> + setMessage(message : String) </td></tr>
<tr><td align="left" balign="left"> + setFilePath(filePath : String) </td></tr>
<tr><td align="left" balign="left"> - build() </td></tr>
<tr><td align="left" balign="left"> + say() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.BaseSensor
	c20 [label=<<table title="ev3dev.sensors.BaseSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BaseSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SWITCH_DELAY : int </td></tr>
<tr><td align="left" balign="left"> # VALUE0 : String </td></tr>
<tr><td align="left" balign="left"> # VALUE1 : String </td></tr>
<tr><td align="left" balign="left"> # VALUE2 : String </td></tr>
<tr><td align="left" balign="left"> # VALUE3 : String </td></tr>
<tr><td align="left" balign="left"> # VALUE4 : String </td></tr>
<tr><td align="left" balign="left"> # VALUE5 : String </td></tr>
<tr><td align="left" balign="left"> # VALUE6 : String </td></tr>
<tr><td align="left" balign="left"> # VALUE7 : String </td></tr>
<tr><td align="left" balign="left"> # currentMode : int </td></tr>
<tr><td align="left" balign="left"> # currentModeS : String </td></tr>
<tr><td align="left" balign="left"> # modes : SensorMode[] </td></tr>
<tr><td align="left" balign="left"> ~ modeList : ArrayList&lt;String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BaseSensor(sensorPort : Port, mode : String, device : String) </td></tr>
<tr><td align="left" balign="left"> + BaseSensor(sensorPort : Port, mode : String) </td></tr>
<tr><td align="left" balign="left"> # setModes(m : SensorMode[]) </td></tr>
<tr><td align="left" balign="left"> + getAvailableModes() : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getMode(mode : int) : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getMode(modeName : String) : SensorMode </td></tr>
<tr><td align="left" balign="left"> - isValid(mode : int) : boolean </td></tr>
<tr><td align="left" balign="left"> - getIndex(modeName : String) : int </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
<tr><td align="left" balign="left"> + setCurrentMode(mode : int) </td></tr>
<tr><td align="left" balign="left"> + setCurrentMode(modeName : String) </td></tr>
<tr><td align="left" balign="left"> + getCurrentMode() : int </td></tr>
<tr><td align="left" balign="left"> + getModeCount() : int </td></tr>
<tr><td align="left" balign="left"> # switchMode(newMode : int, switchDelay : long) </td></tr>
<tr><td align="left" balign="left"> # switchMode(newMode : String, switchDelay : long) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.Battery
	c21 [label=<<table title="ev3dev.sensors.Battery" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Battery </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOGGER : Logger </td></tr>
<tr><td align="left" balign="left"> + BATTERY : String </td></tr>
<tr><td align="left" balign="left"> + BATTERY_EV3 : String </td></tr>
<tr><td align="left" balign="left"> + BATTERY_PISTORMS : String </td></tr>
<tr><td align="left" balign="left"> + BATTERY_BRICKPI : String </td></tr>
<tr><td align="left" balign="left"> + BATTERY_BRICKPI3 : String </td></tr>
<tr><td align="left" balign="left"> - BATTERY_PATH : String </td></tr>
<tr><td align="left" balign="left"> + VOLTAGE : String </td></tr>
<tr><td align="left" balign="left"> + CURRENT : String </td></tr>
<tr><td align="left" balign="left"> - BATTERY_PATH_LOCAL : String </td></tr>
<tr><td align="left" balign="left"> - instance : Battery </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - Battery() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : Battery </td></tr>
<tr><td align="left" balign="left"> - init() </td></tr>
<tr><td align="left" balign="left"> + getVoltageMilliVolt() : int </td></tr>
<tr><td align="left" balign="left"> + getVoltage() : float </td></tr>
<tr><td align="left" balign="left"> + getBatteryCurrent() : float </td></tr>
<tr><td align="left" balign="left"> + getMotorCurrent() : float </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.Button
	c22 [label=<<table title="ev3dev.sensors.Button" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Button </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> + ENTER : Key </td></tr>
<tr><td align="left" balign="left"> + LEFT : Key </td></tr>
<tr><td align="left" balign="left"> + RIGHT : Key </td></tr>
<tr><td align="left" balign="left"> + ESCAPE : Key </td></tr>
<tr><td align="left" balign="left"> + UP : Key </td></tr>
<tr><td align="left" balign="left"> + DOWN : Key </td></tr>
<tr><td align="left" balign="left"> - ALL : Key </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Button() </td></tr>
<tr><td align="left" balign="left"> + waitForAnyEvent() : int </td></tr>
<tr><td align="left" balign="left"> + waitForAnyEvent(timeout : int) : int </td></tr>
<tr><td align="left" balign="left"> + waitForAnyPress(timeout : int) : int </td></tr>
<tr><td align="left" balign="left"> + waitForAnyPress() : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.EV3Key
	c23 [label=<<table title="ev3dev.sensors.EV3Key" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3Key </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> + BUTTON_UP : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_DOWN : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_LEFT : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_RIGHT : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_ENTER : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_BACKSPACE : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_ESCAPE : int </td></tr>
<tr><td align="left" balign="left"> + BUTTON_ALL : int </td></tr>
<tr><td align="left" balign="left"> ~ STATE_KEY_DOWN : byte </td></tr>
<tr><td align="left" balign="left"> ~ STATE_KEY_UP : byte </td></tr>
<tr><td align="left" balign="left"> - SYSTEM_EVENT_PATH : String </td></tr>
<tr><td align="left" balign="left"> - EVENT_BUFFER_LEN : int </td></tr>
<tr><td align="left" balign="left"> - KEY_ID_INDEX : int </td></tr>
<tr><td align="left" balign="left"> - KEY_STATE_INDEX : int </td></tr>
<tr><td align="left" balign="left"> - keyBits : byte </td></tr>
<tr><td align="left" balign="left"> - keyListeners : Map&lt;EV3Key.KeyType, Set&lt;KeyListener&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - keyEventReader : Thread </td></tr>
<tr><td align="left" balign="left"> - keyType : EV3Key.KeyType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3Key(keyType : EV3Key.KeyType) </td></tr>
<tr><td align="left" balign="left"> + EV3Key(id : int) </td></tr>
<tr><td align="left" balign="left"> + getId() : int </td></tr>
<tr><td align="left" balign="left"> + isDown() : boolean </td></tr>
<tr><td align="left" balign="left"> + isUp() : boolean </td></tr>
<tr><td align="left" balign="left"> + waitForPress() </td></tr>
<tr><td align="left" balign="left"> + waitForPressAndRelease() </td></tr>
<tr><td align="left" balign="left"> + addKeyListener(keyListener : KeyListener) </td></tr>
<tr><td align="left" balign="left"> + removeKeyListener(keyListener : KeyListener) </td></tr>
<tr><td align="left" balign="left"> + simulateEvent(i : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> ~ processKeyEvent(keyId : byte, keyState : byte) </td></tr>
<tr><td align="left" balign="left"> - broadcastToListeners(keyType : EV3Key.KeyType, notificationMethod : BiConsumer&lt;KeyListener, Key&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.EV3Key.KeyType
	c24 [label=<<table title="ev3dev.sensors.EV3Key.KeyType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> KeyType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOOKUP : Map&lt;Byte, EV3Key.KeyType&gt; </td></tr>
<tr><td align="left" balign="left"> - name : String </td></tr>
<tr><td align="left" balign="left"> - id : byte </td></tr>
<tr><td align="left" balign="left"> - bitMask : byte </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> UP </td></tr>
<tr><td align="left" balign="left"> DOWN </td></tr>
<tr><td align="left" balign="left"> LEFT </td></tr>
<tr><td align="left" balign="left"> RIGHT </td></tr>
<tr><td align="left" balign="left"> ENTER </td></tr>
<tr><td align="left" balign="left"> ESCAPE </td></tr>
<tr><td align="left" balign="left"> ALL </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.GenericMode
	c25 [label=<<table title="ev3dev.sensors.GenericMode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GenericMode </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - VALUE : String </td></tr>
<tr><td align="left" balign="left"> - VALUE0 : String </td></tr>
<tr><td align="left" balign="left"> - pathDevice : File </td></tr>
<tr><td align="left" balign="left"> - sampleSize : int </td></tr>
<tr><td align="left" balign="left"> - name : String </td></tr>
<tr><td align="left" balign="left"> - type : int </td></tr>
<tr><td align="left" balign="left"> - minRange : float </td></tr>
<tr><td align="left" balign="left"> - maxRange : float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GenericMode(pathDevice : File, sampleSize : int, name : String, type : int) </td></tr>
<tr><td align="left" balign="left"> + GenericMode(pathDevice : File, sampleSize : int, name : String, type : int, minRange : float, maxRange : float) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3ColorSensor
	c26 [label=<<table title="ev3dev.sensors.ev3.EV3ColorSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3ColorSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # colorMap : int[] </td></tr>
<tr><td align="left" balign="left"> - LEGO_EV3_COLOR_SENSOR : String </td></tr>
<tr><td align="left" balign="left"> - COL_RESET : String </td></tr>
<tr><td align="left" balign="left"> - COL_REFLECT : String </td></tr>
<tr><td align="left" balign="left"> - COL_AMBIENT : String </td></tr>
<tr><td align="left" balign="left"> - COL_COLOR : String </td></tr>
<tr><td align="left" balign="left"> # COL_REFRAW : String </td></tr>
<tr><td align="left" balign="left"> - COL_RGBRAW : String </td></tr>
<tr><td align="left" balign="left"> # COL_CAL : String </td></tr>
<tr><td align="left" balign="left"> - lightColor : int[] </td></tr>
<tr><td align="left" balign="left"> # raw : short[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3ColorSensor(portName : Port) </td></tr>
<tr><td align="left" balign="left"> + getColorID() : int </td></tr>
<tr><td align="left" balign="left"> + setFloodlight(floodlight : boolean) </td></tr>
<tr><td align="left" balign="left"> + isFloodlightOn() : boolean </td></tr>
<tr><td align="left" balign="left"> + getFloodlight() : int </td></tr>
<tr><td align="left" balign="left"> + setFloodlight(color : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + getColorIDMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getRedMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getAmbientMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getRGBMode() : SensorMode </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3GyroSensor
	c27 [label=<<table title="ev3dev.sensors.ev3.EV3GyroSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3GyroSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LEGO_EV3_GYRO : String </td></tr>
<tr><td align="left" balign="left"> - MODE_RATE : String </td></tr>
<tr><td align="left" balign="left"> - MODE_ANGLE : String </td></tr>
<tr><td align="left" balign="left"> - MODE_RATE_ANGLE : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3GyroSensor(portName : Port) </td></tr>
<tr><td align="left" balign="left"> + getRateMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + getAngleMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + getAngleAndRateMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3IRSensor
	c28 [label=<<table title="ev3dev.sensors.ev3.EV3IRSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3IRSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LEGO_EV3_IR : String </td></tr>
<tr><td align="left" balign="left"> + MIN_RANGE : float </td></tr>
<tr><td align="left" balign="left"> + MAX_RANGE : float </td></tr>
<tr><td align="left" balign="left"> - MODE_DISTANCE : String </td></tr>
<tr><td align="left" balign="left"> - MODE_SEEK : String </td></tr>
<tr><td align="left" balign="left"> - MODE_REMOTE : String </td></tr>
<tr><td align="left" balign="left"> + IR_CHANNELS : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3IRSensor(portName : Port) </td></tr>
<tr><td align="left" balign="left"> + getDistanceMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getSeekMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getRemoteCommand(chan : int) : int </td></tr>
<tr><td align="left" balign="left"> + getRemoteCommands(cmds : byte[], offset : int, len : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3TouchSensor
	c29 [label=<<table title="ev3dev.sensors.ev3.EV3TouchSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3TouchSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LEGO_EV3_TOUCH : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3TouchSensor(portName : Port) </td></tr>
<tr><td align="left" balign="left"> + getTouchMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + isPressed() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.ev3.EV3UltrasonicSensor
	c30 [label=<<table title="ev3dev.sensors.ev3.EV3UltrasonicSensor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EV3UltrasonicSensor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - DISABLED : int </td></tr>
<tr><td align="left" balign="left"> - LEGO_EV3_US : String </td></tr>
<tr><td align="left" balign="left"> + MIN_RANGE : float </td></tr>
<tr><td align="left" balign="left"> + MAX_RANGE : float </td></tr>
<tr><td align="left" balign="left"> - MODE_DISTANCE : String </td></tr>
<tr><td align="left" balign="left"> - MODE_LISTEN : String </td></tr>
<tr><td align="left" balign="left"> - MODE_SINGLE_MEASURE : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3UltrasonicSensor(portName : Port) </td></tr>
<tr><td align="left" balign="left"> + getListenMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + getDistanceMode() : SampleProvider </td></tr>
<tr><td align="left" balign="left"> + enable() </td></tr>
<tr><td align="left" balign="left"> + disable() </td></tr>
<tr><td align="left" balign="left"> + isEnabled() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.mindsensors.AbsoluteIMU
	c31 [label=<<table title="ev3dev.sensors.mindsensors.AbsoluteIMU" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AbsoluteIMU </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MINDSENSORS_ABSOLUTEIMU : String </td></tr>
<tr><td align="left" balign="left"> + MODE_TILT : String </td></tr>
<tr><td align="left" balign="left"> + MODE_ACCELEROMETER : String </td></tr>
<tr><td align="left" balign="left"> + MODE_COMPASS : String </td></tr>
<tr><td align="left" balign="left"> + MODE_MAGNETIC : String </td></tr>
<tr><td align="left" balign="left"> + MODE_GYRO : String </td></tr>
<tr><td align="left" balign="left"> + START_CALIBRATION : String </td></tr>
<tr><td align="left" balign="left"> + END_CALIBRATION : String </td></tr>
<tr><td align="left" balign="left"> + LOW : int </td></tr>
<tr><td align="left" balign="left"> + MEDIUM : int </td></tr>
<tr><td align="left" balign="left"> + HIGH : int </td></tr>
<tr><td align="left" balign="left"> + VERY_HIGH : int </td></tr>
<tr><td align="left" balign="left"> + SET_ACCELERATION_2G : String </td></tr>
<tr><td align="left" balign="left"> + SET_ACCELERATION_4G : String </td></tr>
<tr><td align="left" balign="left"> + SET_ACCELERATION_8G : String </td></tr>
<tr><td align="left" balign="left"> + SET_ACCELERATION_16G : String </td></tr>
<tr><td align="left" balign="left"> + GYRO_FILTER : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AbsoluteIMU(portName : Port) </td></tr>
<tr><td align="left" balign="left"> + sendCommand(cmd : String) </td></tr>
<tr><td align="left" balign="left"> + getCompassMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getAccelerationMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getMagneticMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getGyroMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + getTiltMode() : SensorMode </td></tr>
<tr><td align="left" balign="left"> + setRange(range : int) </td></tr>
<tr><td align="left" balign="left"> + setGyroFilter(value : int) </td></tr>
<tr><td align="left" balign="left"> + startCalibration() </td></tr>
<tr><td align="left" balign="left"> + stopCalibration() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.sensors.mindsensors.NXTCamV5
	c32 [label=<<table title="ev3dev.sensors.mindsensors.NXTCamV5" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NXTCamV5 </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - MINDSENSORS_NXTCAMV5 : String </td></tr>
<tr><td align="left" balign="left"> + OBJECT_TRACKING : String </td></tr>
<tr><td align="left" balign="left"> + FACE_TRACKING : String </td></tr>
<tr><td align="left" balign="left"> + EYE_TRACKING : String </td></tr>
<tr><td align="left" balign="left"> + LINE_TRACKING : String </td></tr>
<tr><td align="left" balign="left"> - trackingAllowedModeList : Set&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + TAKE_VIDEO : String </td></tr>
<tr><td align="left" balign="left"> + TAKE_PHOTO : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + NXTCamV5(portName : Port) </td></tr>
<tr><td align="left" balign="left"> - initModes() </td></tr>
<tr><td align="left" balign="left"> + setTrackingMode(mode : String) </td></tr>
<tr><td align="left" balign="left"> + sendCommand(cmd : String) </td></tr>
<tr><td align="left" balign="left"> + createVideo() </td></tr>
<tr><td align="left" balign="left"> + createPhoto() </td></tr>
<tr><td align="left" balign="left"> + getNumberOfObjects() : int </td></tr>
<tr><td align="left" balign="left"> + getObjectColor(id : int) : int </td></tr>
<tr><td align="left" balign="left"> + getRectangle(id : int) : Rectangle2D </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.utils.Brickman
	c33 [label=<<table title="ev3dev.utils.Brickman" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Brickman </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOGGER : Logger </td></tr>
<tr><td align="left" balign="left"> - DISABLE_BRICKMAN_COMMAND : String </td></tr>
<tr><td align="left" balign="left"> - ENABLE_BRICKMAN_COMMAND : String </td></tr>
<tr><td align="left" balign="left"> + JAVA_DUKE_IMAGE_NAME : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Brickman() </td></tr>
<tr><td align="left" balign="left"> + disable() </td></tr>
<tr><td align="left" balign="left"> - showJavaLogo() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.utils.Interpolation
	c34 [label=<<table title="ev3dev.utils.Interpolation" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Interpolation </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Interpolation() </td></tr>
<tr><td align="left" balign="left"> + interpolate(x : float, x0 : float, x1 : float, y0 : float, y1 : float) : float </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.utils.JarResource
	c35 [label=<<table title="ev3dev.utils.JarResource" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> JarResource </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + JarResource() </td></tr>
<tr><td align="left" balign="left"> + export(resourceName : String) : String </td></tr>
<tr><td align="left" balign="left"> + delete(resourceName : String) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.utils.PilotProps
	c36 [label=<<table title="ev3dev.utils.PilotProps" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PilotProps </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PERSISTENT_FILENAME : String </td></tr>
<tr><td align="left" balign="left"> + KEY_WHEELDIAMETER : String </td></tr>
<tr><td align="left" balign="left"> + KEY_TRACKWIDTH : String </td></tr>
<tr><td align="left" balign="left"> + KEY_LEFTMOTOR : String </td></tr>
<tr><td align="left" balign="left"> + KEY_RIGHTMOTOR : String </td></tr>
<tr><td align="left" balign="left"> + KEY_REVERSE : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PilotProps() </td></tr>
<tr><td align="left" balign="left"> + loadPersistentValues() </td></tr>
<tr><td align="left" balign="left"> + storePersistentValues() </td></tr>
<tr><td align="left" balign="left"> + getMotor(motor : String) : RegulatedMotor </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.utils.Shell
	c37 [label=<<table title="ev3dev.utils.Shell" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Shell </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> + COMMAND_ERROR_MESSAGE : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Shell() </td></tr>
<tr><td align="left" balign="left"> + execute(command : String) : String </td></tr>
<tr><td align="left" balign="left"> + execute(command : String[]) : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// ev3dev.utils.Sysfs
	c38 [label=<<table title="ev3dev.utils.Sysfs" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sysfs </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Sysfs() </td></tr>
<tr><td align="left" balign="left"> + writeString(filePath : String, value : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + writeInteger(filePath : String, value : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + readString(filePath : String) : String </td></tr>
<tr><td align="left" balign="left"> + readInteger(filePath : String) : int </td></tr>
<tr><td align="left" balign="left"> + readFloat(filePath : String) : float </td></tr>
<tr><td align="left" balign="left"> + getElements(filePath : String) : List&lt;File&gt; </td></tr>
<tr><td align="left" balign="left"> + existPath(filePath : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + existFile(pathToFind : Path) : boolean </td></tr>
<tr><td align="left" balign="left"> + writeBytes(path : String, value : byte[]) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//ev3dev.actuators.LCD extends ev3dev.hardware.EV3DevDevice
	c10:p -> c0:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.Sound extends ev3dev.hardware.EV3DevDevice
	c10:p -> c1:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.ev3.EV3Led extends ev3dev.hardware.EV3DevDevice
	c10:p -> c2:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.lego.motors.BaseRegulatedMotor extends ev3dev.hardware.EV3DevMotorDevice
	c14:p -> c3:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.lego.motors.BasicMotor extends ev3dev.hardware.EV3DevMotorDevice
	c14:p -> c4:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.lego.motors.EV3LargeRegulatedMotor extends ev3dev.actuators.lego.motors.BaseRegulatedMotor
	c3:p -> c5:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.lego.motors.EV3MediumRegulatedMotor extends ev3dev.actuators.lego.motors.BaseRegulatedMotor
	c3:p -> c6:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.lego.motors.NXTRegulatedMotor extends ev3dev.actuators.lego.motors.BaseRegulatedMotor
	c3:p -> c8:p [dir=back,arrowtail=empty];
	//ev3dev.actuators.lego.motors.UnregulatedMotor extends ev3dev.actuators.lego.motors.BasicMotor
	c4:p -> c9:p [dir=back,arrowtail=empty];
	//ev3dev.hardware.EV3DevMotorDevice extends ev3dev.hardware.EV3DevDevice
	c10:p -> c14:p [dir=back,arrowtail=empty];
	//ev3dev.hardware.EV3DevSensorDevice extends ev3dev.hardware.EV3DevDevice
	c10:p -> c18:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.BaseSensor extends ev3dev.hardware.EV3DevSensorDevice
	c18:p -> c20:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.Battery extends ev3dev.hardware.EV3DevDevice
	c10:p -> c21:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3ColorSensor extends ev3dev.sensors.BaseSensor
	c20:p -> c26:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3GyroSensor extends ev3dev.sensors.BaseSensor
	c20:p -> c27:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3IRSensor extends ev3dev.sensors.BaseSensor
	c20:p -> c28:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3TouchSensor extends ev3dev.sensors.BaseSensor
	c20:p -> c29:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.ev3.EV3UltrasonicSensor extends ev3dev.sensors.BaseSensor
	c20:p -> c30:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.mindsensors.AbsoluteIMU extends ev3dev.sensors.BaseSensor
	c20:p -> c31:p [dir=back,arrowtail=empty];
	//ev3dev.sensors.mindsensors.NXTCamV5 extends ev3dev.sensors.BaseSensor
	c20:p -> c32:p [dir=back,arrowtail=empty];
	//ev3dev.utils.PilotProps extends java.util.Properties
	c39:p -> c36:p [dir=back,arrowtail=empty];
	// java.util.Properties
	c39 [label=<<table title="java.util.Properties" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Properties.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Properties </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
<tr><td align="left" balign="left"> # defaults : Properties </td></tr>
<tr><td align="left" balign="left"> - map : ConcurrentHashMap&lt;Object, Object&gt; </td></tr>
<tr><td align="left" balign="left"> - hexDigit : char[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Properties() </td></tr>
<tr><td align="left" balign="left"> + Properties(arg0 : Properties) </td></tr>
<tr><td align="left" balign="left"> + setProperty(arg0 : String, arg1 : String) : Object </td></tr>
<tr><td align="left" balign="left"> + load(arg0 : Reader) </td></tr>
<tr><td align="left" balign="left"> + load(arg0 : InputStream) </td></tr>
<tr><td align="left" balign="left"> - load0(arg0 : Properties.LineReader) </td></tr>
<tr><td align="left" balign="left"> - loadConvert(arg0 : char[], arg1 : int, arg2 : int, arg3 : char[]) : String </td></tr>
<tr><td align="left" balign="left"> - saveConvert(arg0 : String, arg1 : boolean, arg2 : boolean) : String </td></tr>
<tr><td align="left" balign="left"> - writeComments(arg0 : BufferedWriter, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + save(arg0 : OutputStream, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + store(arg0 : Writer, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + store(arg0 : OutputStream, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> - store0(arg0 : BufferedWriter, arg1 : String, arg2 : boolean) </td></tr>
<tr><td align="left" balign="left"> + loadFromXML(arg0 : InputStream) </td></tr>
<tr><td align="left" balign="left"> + storeToXML(arg0 : OutputStream, arg1 : String) </td></tr>
<tr><td align="left" balign="left"> + storeToXML(arg0 : OutputStream, arg1 : String, arg2 : String) </td></tr>
<tr><td align="left" balign="left"> + getProperty(arg0 : String) : String </td></tr>
<tr><td align="left" balign="left"> + getProperty(arg0 : String, arg1 : String) : String </td></tr>
<tr><td align="left" balign="left"> + propertyNames() : Enumeration&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + stringPropertyNames() : Set&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + list(arg0 : PrintStream) </td></tr>
<tr><td align="left" balign="left"> + list(arg0 : PrintWriter) </td></tr>
<tr><td align="left" balign="left"> - enumerate(arg0 : Map&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> - enumerateStringProperties(arg0 : Map&lt;String, String&gt;) </td></tr>
<tr><td align="left" balign="left"> - toHex(arg0 : int) : char </td></tr>
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + keys() : Enumeration&lt;Object&gt; </td></tr>
<tr><td align="left" balign="left"> + elements() : Enumeration&lt;Object&gt; </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsValue(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsKey(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + get(arg0 : Object) : Object </td></tr>
<tr><td align="left" balign="left"> + put(arg0 : Object, arg1 : Object) : Object </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : Object) : Object </td></tr>
<tr><td align="left" balign="left"> + putAll(arg0 : Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + keySet() : Set&lt;Object&gt; </td></tr>
<tr><td align="left" balign="left"> + values() : Collection&lt;Object&gt; </td></tr>
<tr><td align="left" balign="left"> + entrySet() : Set&lt;Map.Entry&lt;Object, Object&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + equals(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + getOrDefault(arg0 : Object, arg1 : Object) : Object </td></tr>
<tr><td align="left" balign="left"> + forEach(arg0 : BiConsumer&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> + replaceAll(arg0 : BiFunction&lt;?, ?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> + putIfAbsent(arg0 : Object, arg1 : Object) : Object </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : Object, arg1 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + replace(arg0 : Object, arg1 : Object, arg2 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + replace(arg0 : Object, arg1 : Object) : Object </td></tr>
<tr><td align="left" balign="left"> + computeIfAbsent(arg0 : Object, arg1 : Function&lt;?, ?&gt;) : Object </td></tr>
<tr><td align="left" balign="left"> + computeIfPresent(arg0 : Object, arg1 : BiFunction&lt;?, ?, ?&gt;) : Object </td></tr>
<tr><td align="left" balign="left"> + compute(arg0 : Object, arg1 : BiFunction&lt;?, ?, ?&gt;) : Object </td></tr>
<tr><td align="left" balign="left"> + merge(arg0 : Object, arg1 : Object, arg2 : BiFunction&lt;?, ?, ?&gt;) : Object </td></tr>
<tr><td align="left" balign="left"> # rehash() </td></tr>
<tr><td align="left" balign="left"> + clone() : Object </td></tr>
<tr><td align="left" balign="left"> ~ writeHashtable(arg0 : ObjectOutputStream) </td></tr>
<tr><td align="left" balign="left"> ~ readHashtable(arg0 : ObjectInputStream) </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Properties.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

